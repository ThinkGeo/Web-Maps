@using ThinkGeo.MapSuite
@using ThinkGeo.MapSuite.Drawing
@using ThinkGeo.MapSuite.Layers
@using ThinkGeo.MapSuite.Shapes
@using ThinkGeo.MapSuite.Styles
@using ThinkGeo.MapSuite.Mvc
<script language="javascript" type="text/javascript">
    function panOffset(x, y) {
        var newX = Map1.getCenter().lon + x;
        var newY = Map1.getCenter().lat + y;
        Map1.panToWorldCoordinate(newX, newY);
    }

    function keyboard(enabled) {
        var keyboardControl = Map1.getMapTools().keyboardMapTool;
        if (keyboardControl == null) {
            keyboardControl = new OpenLayers.Control.KeyboardDefaults();
            Map1.addControl(keyboardControl);
        }

        var checkKeyboard = document.getElementById("chbEnableKeyboard");
        if (enabled) {
            checkKeyboard.checked = "checked";
            keyboardControl.activate();
        } else {
            checkKeyboard.checked = "";
            keyboardControl.deactivate();
        }
    }

    function panZoom(enabled) {
        var mouseMapTool = Map1.getMapTools().mouseMapTool;

        if (mouseMapTool == null) {
            mouseMapTool = new OpenLayers.Control.Navigation();
            Map1.addControl(mouseMapTool);
        }

        var chbEnablePan = document.getElementById("chbEnablePan");
        var disableZoom = document.getElementById("chbDisableZoom");
        if (enabled) {
            chbEnablePan.checked = "checked";
            disableZoom.disabled = null;
            mouseMapTool.activate();
        } else {
            chbEnablePan.checked = "";
            disableZoom.disabled = "disabled";
            mouseMapTool.deactivate();
        }
    }

    function zoomAction(enabled) {
        var mouseMapTool = Map1.getMapTools().mouseMapTool;
        if (mouseMapTool != null) {
            var disableZoom = document.getElementById("chbDisableZoom");
            if (enabled) {
                disableZoom.checked = "checked";
                mouseMapTool.disableZoomWheel();
            } else {
                disableZoom.checked = "";
                mouseMapTool.enableZoomWheel();
            }
        }
    }
</script>
<div class="four columns" id="navigation">
    @{Html.RenderPartial("SourceCode");}
    <div id="instrux-body">
        <div id="instrux-text">
            Click one of the directional buttons to pan the map using either client or server
            side code.
            <br />
            <div style="margin-top: 10px;">
                <span class="desTitle">Pan by your mouse:</span>
                <br />
                <input id="chbEnablePan" type="checkbox" value="" checked="checked" onclick="panZoom(this.checked);" />Enable
                panning by mouse
                <br />
                <input id="chbDisableZoom" type="checkbox"  value="" onclick="zoomAction(this.checked);" />Disable
                Zoom by Mouse
            </div>
            <div style="margin-top: 10px;">
                <span class="desTitle">Pan by your keyboard:</span>
                <br />
                <input id="chbEnableKeyboard" type="checkbox" value="" onclick="keyboard(this.checked);" />Enable
                panning by keyboard
            </div>
            <div style="margin-top: 10px;">
                <span class="desTitle">Pan using the client API:</span>
                <br />
                <input type="button" style="width: 100px;" id="btnPanLeft" value="Pan Left" onclick="panOffset(-10,0);" />
                <input type="button" style="width: 100px;" id="btnPanRight" value="Pan Right" onclick="panOffset(10,0);" />
                <br />
                <input type="button" style="width: 100px;" id="btnPanUp" value="Pan Up" onclick="panOffset(0,10);" />
                <input type="button" style="width: 100px;" id="btnPanDown" value="Pan Down" onclick="panOffset(0,-10);" />
            </div>
        </div>
    </div>
</div>
<div class="sixteen columns" id="main">
    <div>
        @{Html.ThinkGeo().Map("Map1", new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Percentage), 760)
                    .MapBackground(new GeoSolidBrush(GeoColor.FromHtml("#E5E3DF")))
                    .MapUnit(GeographyUnit.Meter)
                    .ZoomLevelSet(new ThinkGeoCloudMapsZoomLevelSet())
                    .CurrentExtent(-14607343.5818934, 7371576.14679691, -6014592.08756057, 1910351.0222467)
                    .CustomOverlays(overlay => {
                      // Please input your ThinkGeo Cloud API Key to enable the background map.
                      overlay.ThinkGeoCloudRasterMapsOverlay("ThinkGeoCloudMaps", "ThinkGeo Cloud API Key");
                    })
                    .MapTools(tools =>
                    {
                        tools.MouseMapTool().Enabled(true);
                        tools.KeyboardMapTool().Enabled(false);
                    })
                    .Render();
        }
    </div>
</div>
