<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Site Selection</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="author" content="ThinkGeo" />
    <link rel="apple-touch-icon" href="desktop.png" />
    <meta name="apple-mobile-web-app-title" content="Site Selection" />
    <link href="favicon.ico" rel="shortcut icon" type="Images/x-icon" />
    <link href="Content/leaflet.css" rel="stylesheet" />
    <link href="Content/bootstrap.min.css" rel="stylesheet" />
    <link href="Content/Site.css" rel="stylesheet" />
</head>
<body>
    <div id="map">
    </div>
    <div id="message"></div>
    <div id="loadingImage">
        <img src="Images/ajax-loader.gif" />
    </div>
    <div id="legend">
        <img src="Images/legend.png" />
    </div>
    <div id="left-panel">
        <div class="panel-header">
            <span class="title">Result List</span>
        </div>
        <div class="panel-content">
            <div id="div-resultlist">
                <table id="result-table" class="table table-triped table-bordered">
                    <tr>
                        <td></td>
                        <td>
                            Name
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div class="centroid">
        <div id="edit-panel">
            <div class="edit-panel-header">
                <span id="settingTitle">Settings of site selection</span>
            </div>
            <div id="div-setting" class="edit-content">
                <div class="edit-body">
                    Highlight points of this type
                    <select id="sltCategory"></select>
                    <select id="sltCategorySubtype"></select>
                    Area Type
                    <select id="sltSearchMode">
                        <option value="serviceArea">Service Area</option>
                        <option value="bufferedArea">Buffered Area</option>
                    </select>
                    <div id="divService">
                        <span class="valueLabel">Service Area in</span>
                        <input type="text" id="tbxServiceArea" class="valueTxt" value="5" /><span class="valueLabel"> Minutes Driving</span>
                    </div>
                    <div id="divBuffer" style="display: none;">
                        <span class="valueLabel">Buffer Distance:</span>
                        <input type="text" id="tbxDistance" class="valueTxt" value="2" />
                        <select id="sltDistanceUnit" style="width: 100px;">
                            <option value="Mile">Mile</option>
                            <option value="Kilometer">Kilometer</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="edit-foot">
                <a id="btnSettingCancel" href="#" class="btn btn-default" role="button">Cancel</a>
                <a id="btnSettingSave" href="#" class="btn btn-primary" role="button">Save</a>
            </div>
        </div>
    </div>
    <script src="Scripts/jquery-1.11.1.min.js"></script>
    <script src="Scripts/leaflet.js"></script>
    <script src="thinkgeo.leaflet.js"></script>
    <script>
        var map, searchPoint, searchArea, searchPointMarker, searchResultsMarkers, trackMode = 'plot';
        var defaultSetting = {
            lng: -96.809983627817,
            lat: 33.128303417665,
            category: 'Restaurants',
            subCategory: 'All',
            searchMode: 'serviceArea',
            driveTime: 5
        };

        var searchPointIcon = L.icon({
            iconUrl: 'Images/drawPoint.png',
            iconSize: [32, 32],
            iconAnchor: [16, 32]
        });

        var searchResultIcon = L.icon({
            iconUrl: 'Images/selectedHalo.png',
            iconSize: [32, 32]
        });

        var searchAreaStyle = {
            fillColor: '#33a8e1',
            fillOpacity: 0.6,
            color: '#428ce3',
            weight: 2
        };

        $(function () {
            // Initialize the POI categories and its sub-type categories
            $.get(L.Util.getRootPath() + "/SiteSelection/GetCategories/", function (response) {
                var categoies = JSON.parse(response);
                $.each(categoies, function (key) {
                    $('#sltCategory').append($("<option/>", {
                        value: key,
                        text: key
                    }));
                });
                $("#sltCategory").change(function () {
                    var selectValue = $("#sltCategory").val();
                    var selectedCategories;
                    if (categoies.hasOwnProperty(selectValue)) {
                        selectedCategories = categoies[selectValue];
                    }
                    $('#sltCategorySubtype').empty();
                    for (var i = 0; i < selectedCategories.length; i++) {
                        $('#sltCategorySubtype').append($("<option/>", {
                            value: selectedCategories[i],
                            text: selectedCategories[i]
                        }));
                    }
                });
                var setting = defaultSetting;
                searchPoint = new L.LatLng(setting.lat, setting.lng);
                L.marker([setting.lat, setting.lng], { icon: searchPointIcon }).addTo(searchPointMarker);

                $("#sltCategory").val(setting.category).trigger('change');
                $("#sltCategorySubtype").val(setting.subCategory);
                $("#sltSearchMode").val(setting.searchMode).trigger('change');
                if (setting.driveTime) {
                    $("#tbxServiceArea").val(setting.driveTime);
                }
                if (setting.bufferDistance) {
                    $("#tbxServiceArea").val(setting.bufferDistance);
                }
                if (setting.sltDistanceUnit) {
                    $("#tbxServiceArea").val(setting.distanceUnit);
                }
                applySearch();
            });

            // Initialize the map.
            map = L.map('map', {
                center: [33.1279394892519, -96.8008536874563],
                zoom: 14
            });
            L.control.scale().addTo(map);

            // Added ThinkGeoCloudMaps as the background map.
            var thinkgeoCloudMapsLayer = L.tileLayer('https://{s}.thinkgeo.com/api/v1/maps/raster/light/x1/3857/256/{z}/{x}/{y}.png?apikey=ThinkGeo Cloud API Key', {
                subdomains: ['cloud1', 'cloud2', 'cloud3', 'cloud4', 'cloud5', 'cloud6'],
                layers: 'ThinkGeoCloudMaps',
                format: 'image/png',
                styles: 'Light',
                version: '1.1.1'
            });

            // --------------------------------------------------------------------------------------
            // Backgrounds for this sample are powered by ThinkGeo Cloud Maps and require
            // an API Key. The following function is just for reminding you to input the key.
            // Feel free to remove this function after the key was input.
            // --------------------------------------------------------------------------------------
            thinkgeoCloudMapsLayer.on('tileloadstart', function (e) {
                //e.tile.src = drawException();
                fetch(e.tile.src).then((response) => {
                    if (response.status === 401) {
                        var canvas = document.createElement("canvas");
                        canvas.width = 256;
                        canvas.height = 256;
                        var context = canvas.getContext("2d");
                        context.font = "14px Arial";
                        context.strokeText("Backgrounds for this sample are", 10, 20);
                        context.strokeText("powered by ThinkGeo Cloud Maps and", 10, 40);
                        context.strokeText("require an API Key. This was sent", 10, 60);
                        context.strokeText("to you via email when you signed up", 10, 80);
                        context.strokeText("with ThinkGeo, or you can register", 10, 100);
                        context.strokeText("now at https://cloud.thinkgeo.com", 10, 120);
                        e.tile.src = canvas.toDataURL("image/png", 1);
                    }
                    else {
                        response.blob().then((blob) => {
                            if (blob) {
                                e.tile.src = URL.createObjectURL(blob);
                            }
                            else {
                                e.tile.src = "";
                            }
                        });
                    }
                });
            });
            thinkgeoCloudMapsLayer.addTo(map);

            // Add POI base layer.
            L.tileLayer(L.Util.getRootPath() + '/SiteSelection/baselayer/{z}/{x}/{y}').addTo(map);

            // Add the marker layer for search location.
            searchPointMarker = new L.FeatureGroup();
            map.addLayer(searchPointMarker);

            // Add the marker layers to show the searching poi result.
            searchResultsMarkers = new L.FeatureGroup();
            map.addLayer(searchResultsMarkers);

            // Add the layer to show the searching area.
            searchArea = L.geoJson(null, { style: searchAreaStyle }).addTo(map);

            // Add image controls for pan, plot, settings etc.
            L.imageButtons({
                imgs: [
                    {
                        src: 'Images/pan.png',
                        id: 'btnPan',
                        title: 'Pan the map',
                        callback: function (e) {
                            trackMode = 'pan';

                            $(map.getContainer()).css("cursor", "pointer");
                            $('#btnPlot').removeClass('active');
                            $(e.target).addClass('active');
                        }
                    },
                    {
                        src: 'Images/plot.png',
                        id: 'btnPlot',
                        title: 'Plot a point',
                        css: 'active',
                        callback: function (e) {
                            trackMode = 'plot';

                            $(map.getContainer()).css("cursor", "crosshair");
                            $('#btnPan').removeClass('active');
                            $(e.target).addClass('active');
                        }
                    },
                    {
                        src: 'Images/clear.png',
                        id: 'btnClear',
                        title: 'clear',
                        callback: function () {
                            searchPoint = null;
                            searchArea.clearLayers();
                            searchPointMarker.clearLayers();
                            searchResultsMarkers.clearLayers();
                            // Remove all the lines except the header
                            $("#result-table tr:gt(0)").remove();
                        }
                    },
                    {
                        src: 'Images/gear.png',
                        id: 'btnSetting',
                        title: 'setting',
                        callback: function () {
                            showSettingDlg();
                        }
                    }
                ]
            }).addTo(map);

            L.imageButtons({
                imgs: [
                    {
                        src: 'Images/more.png',
                        id: 'btnMore',
                        title: 'Show Details',
                        callback: function () {
                            showResultDlg();
                        }
                    }]
            }).addTo(map);

            // Function for plotting a point on the map and do a query based on the clicked point.
            $(map.getContainer()).css("cursor", "crosshair");
            map.on("click", function (e) {
                if (trackMode == 'plot') {
                    if (listViewHidden()) {
                        searchPoint = e.latlng;
                        searchPointMarker.clearLayers();
                        L.marker([e.latlng.lat, e.latlng.lng], { icon: searchPointIcon }).addTo(searchPointMarker);

                        applySearch();
                    }
                }
            });

            $("html").click(function () {
                $('#left-panel').animate({
                    'left': -$('#left-panel').width() + 'px'
                });
            });

            var listViewHidden = function () {
                return ($("#left-panel").css("left") != "0px");
            }

            $("#sltSearchMode").change(function (e) {
                if ($("#sltSearchMode").val() == 'bufferedArea') {
                    $("#divBuffer").show();
                    $("#divService").hide();
                }
                else {
                    $("#divBuffer").hide();
                    $("#divService").show();
                }
            });

            $("#btnSettingCancel").click(function () {
                hideSettingDlg();
            });

            $("#btnSettingSave").click(function () {
                applySearch();
            });

            var applySearch = function () {
                hideSettingDlg();
                if (!searchPoint) {
                    return;
                }
                var category = $("#sltCategory").val();;
                var subCategory = $('#sltCategorySubtype').val().replace(">=", ">~");
                var searchMode = $("#sltSearchMode").val();

                var args = { "category": category, "subCategory": subCategory, "searchMode": searchMode, "searchPoint": searchPoint.lng + "," + searchPoint.lat };
                if (searchMode == "serviceArea") {
                    args["driveTime"] = $("#tbxServiceArea").val();
                } else {
                    args["distanceBuffer"] = $("#tbxDistance").val();
                    args["distanceUnit"] = $("#sltDistanceUnit").val();
                }

                $.post(L.Util.getRootPath() + "SiteSelection/Search/", { '': JSON.stringify(args) }, function (res) {
                    $("#result-table tr:gt(0)").remove();

                    var data = JSON.parse(res);
                    if (data.status == 2) {
                        $("#message").html("Please note that this sample map is only able to analyze service areas within the Frisco, TX city limits, <br\>which are indicated by a dashed red line. Click inside that boundary for best results. ");
                        $("#message").show().delay(5000).fadeOut();
                    }
                    if (data.status == 1) {
                        $("#message").text("No results found.");
                        $("#message").show().delay(5000).fadeOut();
                    }
                    if (data.status == 0) {

                        // Display the search area.
                        var geoJson = JSON.parse(data.area);
                        searchArea.clearLayers();
                        searchArea.addData(geoJson);

                        // Binding table data on the left panel.
                        bindSearchTableResult(data.features);
                        // Binding the result markers.
                        bindSearchMarkerResult(data.features);
                    }
                });
            }
        });

        // Functions for displaying query result to grid table.
        function bindSearchTableResult(queryItems) {
            // Remove all the lines except the header
            $("#result-table tr:gt(0)").remove();
            // Display data in the Grid table
            for (var i = 0; i < queryItems.length; i++) {
                var name = queryItems[i].name;
                var position = queryItems[i].point;
                var newRow = $("<tr>");
                newRow.append('<td><a style="width:14px;display:block;"><img alt="Search" title="Zoom to sepcified POI" src="Images/find.png" onclick="zoomToPoi(' + position.split(',')[0] + ',' + position.split(',')[1] + ')" /></a></td>');
                newRow.append("<td>" + name + "</td>");
                $("#result-table > tbody:last").append(newRow);
            }
        }

        // Function for displaying the query result markers over the map.
        function bindSearchMarkerResult(queryItems) {
            // Clear the previous markers.
            searchResultsMarkers.clearLayers();
            // Add the markers into marker layer which has been added into the map instance.
            for (var i = 0; i < queryItems.length; i++) {
                var name = queryItems[i].name;
                var position = queryItems[i].point;
                L.marker([position.split(',')[0], position.split(',')[1]], { icon: searchResultIcon }).addTo(searchResultsMarkers);
            }
        }

        function zoomToPoi(lat, lng) {
            map.setView(L.latLng(lat, lng), 16);
        }

        /* Setting dialog events*/
        function showSettingDlg() {
            this.bgmask = L.DomUtil.create('div', 'bg-mask');
            $('body').append(this.bgmask);
            $('#edit-panel').slideToggle("fast");
        }

        function hideSettingDlg() {
            if ($('#edit-panel').is(':visible')) {
                $('.bg-mask').remove();
                $('#edit-panel').slideToggle("fast");
            }
        }

        function showResultDlg() {
            $('#left-panel').animate({
                'left': '0px'
            });
        }
    </script>
</body>
</html>
