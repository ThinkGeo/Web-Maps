@page "/find-nearby-places"
@using ThinkGeo.Core
@using Newtonsoft.Json

@inject IHttpClientFactory httpClientFactory
@inject IJSRuntime JSRuntime

<div class="map-container" @ref="@mapContainer">
    <MapView Id="map" @ref="@map"
             Width="100"
             Height="100"
             MapViewSizeUnitType="MapViewSizeUnitType.Percentage"
             Center="@(new PointShape(-10776240.559558384, 3911269.658530373))"
             Zoom="16"
             MapUnit="@ThinkGeo.Core.GeographyUnit.Meter"
             OnClick="OnMapViewClick">
        <OverlaysSetting>
            <ThinkGeoCloudRasterMapsOverlay Id="RasterOverlay" MapType="ThinkGeoCloudRasterMapsMapType.Light"
                                            ApiKey="@GlobalSettings.ThinkGeoApiKey" />
            <LayerOverlay Id="RadiusOverlay" Layers="@layers"></LayerOverlay>
        </OverlaysSetting>
        <MarkerOverlaySetting>
            <InMemoryMarkerOverlay Id="PoisMarkerOverlay" ZoomLevelSet="@markerZoomLevelSet" FeatureSource="@markerSource"
                                   OnClick="@HandleMarkerClick" />
        </MarkerOverlaySetting>
        <PopupOverlaySetting>
            <PopupOverlay Id="PopupOverlay" PopupSource="popups">
                <PopupSetting>
                    <Popup Position="@popupPosition" OnClose="@(() => { stopMapClickEvent = true; popupPosition = null; })">
                        @{
                            var item = popupItem as Dictionary<string, string>;
                            if (item != null)
                            {
                                <p>@item["Address"]</p>
                            }
                        }
                    </Popup>
                </PopupSetting>
            </PopupOverlay>
        </PopupOverlaySetting>
        <MapToolsSetting>
            <MapTools>
                <ZoomBarMapTool />
            </MapTools>
        </MapToolsSetting>
    </MapView>
    <div class="position-absolute bottom-center text-center bg-dark opacity-50 px-5 py-3"><span class="text-white description">Click on the map and get the POIs nearby.</span></div>
</div>

@code{
    MapView map;
    ElementReference mapContainer;
    InMemoryFeatureSource markerSource;
    MarkerZoomLevelSet markerZoomLevelSet;
    GeoCollection<Layer> layers;
    object popupItem;
    PointShape popupPosition;
    List<object> popups = new List<object> { new object() };
    bool stopMapClickEvent;

    protected override void OnInitialized()
    {
        layers = new GeoCollection<Layer>();
        var circleLayer = new InMemoryFeatureLayer();
        circleLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle = new AreaStyle
        {
            FillBrush = new GeoSolidBrush(new GeoColor(50, GeoColors.Blue)),
            OutlinePen = new GeoPen(GeoBrushes.Blue, 1f)
        };
        circleLayer.ZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20;
        layers.Add(circleLayer);

        markerZoomLevelSet = new MarkerZoomLevelSet();
        markerZoomLevelSet.ZoomLevel01.CustomMarkerStyle = GetValueMarkerStyle();
        markerZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20;

        var columns = new List<FeatureSourceColumn>
    {
            new FeatureSourceColumn("Type")
        };
        markerSource = new InMemoryFeatureSource(columns);
    }

    async Task<ReverseGeocodingResult> GetPoisAsync(PointShape location)
    {
        var url = $"https://cloud.thinkgeo.com/api/v1/location/reverse-geocode/{location.Y},{location.X}?Srid=3857&SearchRadius=500&MaxResults=20&VerboseResults=true&apikey={GlobalSettings.ThinkGeoApiKey}";
        var httpClient = httpClientFactory.CreateClient();
        var responseMessage = await httpClient.GetAsync(url);
        if (responseMessage.IsSuccessStatusCode)
        {
            var jsonBody = await responseMessage.Content.ReadAsStringAsync();

            var responseItems = JsonConvert.DeserializeAnonymousType(jsonBody, new
            {
                Data = new
                {
                    BestMatchLocation = new { Data = new ReverseGeocodingLocation() },
                    NearbyLocations = new[] { new { Data = new ReverseGeocodingLocation() } }
                }
            });
            return new ReverseGeocodingResult(responseItems.Data?.BestMatchLocation?.Data, responseItems.Data?.NearbyLocations?.Select(p => p.Data));
        }
        return null;
    }

    async void OnMapViewClick(ClickedMapViewEventArgs args)
    {
        if (stopMapClickEvent)
        {
            stopMapClickEvent = false;
            return;
        }
        ClosePopup();

        await JSRuntime.InvokeVoidAsync("showLoadingBackdrop", mapContainer);

        markerSource.InternalFeatures.Clear();

        var result = await GetPoisAsync(new PointShape(args.WorldX, args.WorldY));
        if (result != null)
        {
            if (result.NearbyLocations?.Any() ?? false)
            {
                foreach (var item in result.NearbyLocations)
                {
                    var location = BaseShape.CreateShapeFromWellKnownData(item.LocationFeatureWellKnownText).GetCenterPoint();
                    var feature = new Feature(location, new Dictionary<string, string> { { "Address", item.Address } });
                    feature.ColumnValues["Type"] = "Nearby";
                    markerSource.InternalFeatures.Add(feature);
                }
            }
            if (result.BestMatchLocation != null)
            {
                var location = BaseShape.CreateShapeFromWellKnownData(result.BestMatchLocation.LocationFeatureWellKnownText).GetCenterPoint();
                var feature = new Feature(location, new Dictionary<string, string> { { "Address", result.BestMatchLocation.Address } });
                feature.ColumnValues["Type"] = "BestLocation";
                markerSource.InternalFeatures.Add(feature);
            }

            var radiusFeature = new Feature(new EllipseShape(new PointShape(args.WorldX, args.WorldY), 500d));
            (layers[0] as InMemoryFeatureLayer).InternalFeatures.Clear();
            (layers[0] as InMemoryFeatureLayer).InternalFeatures.Add(radiusFeature);
            await map.Overlays["RadiusOverlay"].RedrawAsync();
            await map.MarkerOverlay.RedrawAsync();
        }

        await JSRuntime.InvokeAsync<object>("hideLoadingBackdrop");
    }

    void HandleMarkerClick(ClickedMarkerOverlayEventArgs e)
    {
        stopMapClickEvent = true;
        var clickedMarker = e.ClickedMarker;
        markerSource.Open();
        var feature = markerSource.GetFeatureById(clickedMarker.Id, ReturningColumnsType.AllColumns);
        markerSource.Close();
        popupItem = feature.ColumnValues;
        var position = new PointShape(e.ClickedMarker.Position.X, e.ClickedMarker.Position.Y);
        popupPosition = position;
    }

    void ClosePopup()
    {
        popupItem = null;
        popupPosition = null;
    }

    static ValueMarkerStyle GetValueMarkerStyle()
    {
        var valueStyle = new ValueMarkerStyle("Type");

        var bestLocationStyle = new PointMarkerStyle("images/point.png", 0.5, 0.5);
        var currentPositionItem = new MarkerValueItem("BestLocation", bestLocationStyle);
        valueStyle.ValueItems.Add(currentPositionItem);

        var nearbyLocationStyle = new PointMarkerStyle("images/others.png", 0.5, 0.5, 0.2);
        var historyPositionItem = new MarkerValueItem("Nearby", nearbyLocationStyle);
        valueStyle.ValueItems.Add(historyPositionItem);

        return valueStyle;
    }
}