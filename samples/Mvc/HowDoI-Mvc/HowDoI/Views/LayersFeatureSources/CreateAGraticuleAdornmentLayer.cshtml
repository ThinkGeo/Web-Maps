@using ThinkGeo.MapSuite.Mvc
@using ThinkGeo.MapSuite
@using ThinkGeo.MapSuite.Drawing
@using ThinkGeo.MapSuite.Layers
@using ThinkGeo.MapSuite.Shapes
@using ThinkGeo.MapSuite.Styles
<div class="four columns" id="navigation">
    @{Html.RenderPartial("SourceCode");}
    <div id="instrux-body">
        <div id="instrux-text">
            This sample simply shows how to use GraticuleAdornmentLayer.
        </div>
    </div>
</div>
<div class="sixteen columns" id="main">
    <div>
        @{Html.ThinkGeo().Map("Map1", new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Percentage), 760)
            .MapBackground(new GeoSolidBrush(GeoColor.FromHtml("#E5E3DF")))
            .MapUnit(GeographyUnit.Meter)
            .ZoomLevelSet(new ThinkGeoCloudMapsZoomLevelSet())
            .CurrentExtent(-14607343.5818934, 7371576.14679691, -6014592.08756057, 1910351.0222467)
            .CustomOverlays(overlays =>
            {
                // Please input your ThinkGeo Cloud API Key to enable the background map.
                overlays.ThinkGeoCloudRasterMapsOverlay("ThinkGeoCloudMaps", "ThinkGeo Cloud API Key");

                GraticuleFeatureLayer graticuleAdornmentLayer = new GraticuleFeatureLayer();
                graticuleAdornmentLayer.Projection = new Proj4Projection(4326,3857);
                graticuleAdornmentLayer.GraticuleTextBrush = new GeoSolidBrush(GeoColor.FromArgb(125, GeoColor.StandardColors.Navy));

                overlays.LayerOverlay().Layer(graticuleAdornmentLayer).IsBaseOverlay(false).TileType(TileType.SingleTile);
            }
      ).Render();}
    </div>
</div>
