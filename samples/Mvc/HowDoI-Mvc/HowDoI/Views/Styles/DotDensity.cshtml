@using ThinkGeo.MapSuite.Mvc
@using ThinkGeo.MapSuite
@using ThinkGeo.MapSuite.Drawing
@using ThinkGeo.MapSuite.Layers
@using ThinkGeo.MapSuite.Shapes
@using ThinkGeo.MapSuite.Styles
@using System.Collections.ObjectModel;
@using ZedGraph;
<div class="four columns" id="navigation">
    @{Html.RenderPartial("SourceCode");}
    <div id="instrux-body">
        <div id="instrux-text">
            <p>
                This sample uses different density of dots to represent different population of
                states.
            </p>
        </div>
    </div>
</div>
<div class="sixteen columns" id="main">
    <div>
        @{
            Html.ThinkGeo().Map("Map1", new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Percentage), 760)
                .MapBackground(new GeoSolidBrush(GeoColor.FromHtml("#E5E3DF")))
                .MapUnit(GeographyUnit.Meter)
                .ZoomLevelSet(new ThinkGeoCloudMapsZoomLevelSet())
                .CurrentExtent(-14607343.5818934, 7371576.14679691, -6014592.08756057, 1910351.0222467)
                .CustomOverlays(overlays =>
                {
                    // Please input your ThinkGeo Cloud API Key to enable the background map.
                    overlays.ThinkGeoCloudRasterMapsOverlay("ThinkGeoCloudMaps", "ThinkGeo Cloud API Key");
                    ShapeFileFeatureLayer statesLayer = new ShapeFileFeatureLayer(Server.MapPath("~/App_Data/states.shp"));
                    statesLayer.ZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20;

                    DotDensityStyle dotDensityStyle = new DotDensityStyle();
                    dotDensityStyle.ColumnName = "POP1990";
                    dotDensityStyle.PointToValueRatio = 0.00001;
                    dotDensityStyle.CustomPointStyle = new PointStyle(PointSymbolType.Circle, new GeoSolidBrush(GeoColor.FromArgb(180, GeoColor.StandardColors.OrangeRed)), 4);
                    statesLayer.ZoomLevelSet.ZoomLevel01.CustomStyles.Add(dotDensityStyle);
                    overlays.LayerOverlay().IsBaseOverlay(false).Layer("States", statesLayer);
                })
                .Render();
        }
    </div>
</div>
