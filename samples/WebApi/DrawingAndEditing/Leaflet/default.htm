<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Draw edit features</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="author" content="ThinkGeo" />
    <link rel="apple-touch-icon" href="desktop.png" />
    <meta name="apple-mobile-web-app-title" content="Draw edit features" />
    <link href="favicon.ico" rel="shortcut icon" type="Images/x-icon" />
    <link href="Content/leaflet.css" rel="stylesheet" />
    <link href="Content/leaflet.draw.css" rel="stylesheet" />
    <link href="Content/bootstrap.min.css" rel="stylesheet" />
    <link href="Content/Site.css" rel="stylesheet" />
</head>
<body>
    <div id="map">
    </div>
    <div id="loadingImage">
        <img src="Images/ajax-loader.gif" />
    </div>
    <div class="centroid">
        <div id="dlgName">
            <div class="edit-panel-header">
                <span>Description of drawn shape</span>
            </div>
            <div class="edit-content">
                <input type="text" id="txtName" />
                <span id="spWarning" class="warning">The name is required.</span>
            </div>
            <div class="edit-foot">
                <a id="btnSaveName" href="#" class="btn btn-primary" role="button">OK</a>
            </div>
        </div>
    </div>
    <script src="Scripts/jquery-1.11.1.min.js"></script>
    <script src="Scripts/leaflet.js"></script>
    <script src="Scripts/leaflet.draw.js"></script>
    <script src="thinkgeo.leaflet.js"></script>
    <script>
        var accessId = guid();
        var drawingLayer, editServerShapes = false;
        var editingData = { removedIds: [], newShapes: [] };

        // Create the leaflet map.
        var map = L.map('map', { center: [33.1451, -96.8150], zoom: 16 });

        // Added ThinkGeoCloudMaps as the background map.
        var thinkgeoCloudMapsLayer = L.tileLayer('https://{s}.thinkgeo.com/api/v1/maps/raster/light/x1/3857/256/{z}/{x}/{y}.png?apikey=ThinkGeo Cloud API Key', {
            subdomains: ['cloud1', 'cloud2', 'cloud3', 'cloud4', 'cloud5', 'cloud6'],
            layers: 'ThinkGeoCloudMaps',
            format: 'image/png',
            styles: 'Light',
            version: '1.1.1'
        })
            // --------------------------------------------------------------------------------------
            // Backgrounds for this sample are powered by ThinkGeo Cloud Maps and require
            // an API Key. The following function is just for reminding you to input the key.
            // Feel free to remove this function after the key was input.
            // --------------------------------------------------------------------------------------
            .on('tileloadstart', function (e) {
                //e.tile.src = drawException();
                fetch(e.tile.src).then((response) => {
                    if (response.status === 401) {
                        var canvas = document.createElement("canvas");
                        canvas.width = 256;
                        canvas.height = 256;
                        var context = canvas.getContext("2d");
                        context.font = "14px Arial";
                        context.strokeText("Backgrounds for this sample are", 10, 20);
                        context.strokeText("powered by ThinkGeo Cloud Maps and", 10, 40);
                        context.strokeText("require an API Key. This was sent", 10, 60);
                        context.strokeText("to you via email when you signed up", 10, 80);
                        context.strokeText("with ThinkGeo, or you can register", 10, 100);
                        context.strokeText("now at https://cloud.thinkgeo.com", 10, 120);
                        e.tile.src = canvas.toDataURL("image/png", 1);
                    }
                    else {
                        response.blob().then((blob) => {
                            if (blob) {
                                e.tile.src = URL.createObjectURL(blob);
                            }
                            else {
                                e.tile.src = "";
                            }
                        });
                    }
                });
            })
            .addTo(map);

        // Add the layer to the map to render the shapes which we will be editing.
        var shapeLayer = L.dynamicLayer(getRootPath() + "edit/{z}/{x}/{y}/" + accessId);
        shapeLayer.on('loading', function () {
            $('#loadingImage').show();
        })
        shapeLayer.on('load', function () {
            $('#loadingImage').hide();
        })
        shapeLayer.addTo(map);

        // Initialise the FeatureGroup to save editable layers.
        var drawnItems = L.featureGroup().addTo(map);

        // Initialise the draw control and pass it the FeatureGroup of editable shapes.
        var drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems
            }
        }).addTo(map);

        // Add image buttons for shapes, editing, help etc.
        L.imageButtons({
            imgs: [
                {
                    src: 'Images/save.png',
                    id: 'imgSave',
                    title: 'Save to server',
                    callback: function () {
                        editServerShapes = false;
                        drawnItems.eachLayer(function (layer) {
                            var geoJson = layer.toGeoJSON();
                            if (layer._mRadius) {
                                geoJson.geometry.radius = layer.getRadius();
                                geoJson.geometry.type = "Circle";
                                geoJson.geometry.radiusUnit = "Meter";
                            }
                            geoJson.id = layer.id;
                            geoJson.properties = { 'name': layer.name };
                            editingData.newShapes.push(geoJson);
                        }, this);

                        // Save the drawn features to server side in GeoJSON format
                        $.post(getRootPath() + 'edit/saveshapes/' + accessId, { '': JSON.stringify(editingData) }, function (data) {
                            if (shapeLayer) {
                                map.removeLayer(shapeLayer);
                            }
                            shapeLayer = L.dynamicLayer(getRootPath() + "edit/{z}/{x}/{y}/" + accessId).addTo(map);
                            shapeLayer.on('loading', function () {
                                $('#loadingImage').show();
                            })
                            shapeLayer.on('load', function () {
                                $('#loadingImage').hide();
                            })
                            drawnItems.clearLayers();

                            editingData.removedIds.length = 0;
                            editingData.newShapes.length = 0;
                        });

                        $('#btnStartingEdit').prop("disabled", false);
                    }
                }
            ]
        }).addTo(map);

        // Hook up the shape created event.
        map.on('draw:created', function (e) {
            drawingLayer = e.layer;
            drawingLayer.id = guid();
            drawnItems.addLayer(drawingLayer);

            showDlg();
        });

        // Hook up the shape deleted event .
        map.on('draw:deleted', function (e) {
            var layers = e.layers;
            layers.eachLayer(function (layer) {
                editingData.removedIds.push(layer.id);
            });
        });

        // Handle click events for different types of shapes.
        $('.leaflet-draw-edit-edit').click(function (e) {
            if (!editServerShapes) {
                editServerShapes = true;
                $.get(getRootPath() + 'edit/getshapes/' + accessId, function (data) {
                    var geoJsons = JSON.parse(data);
                    for (var i = 0; i < geoJsons.length; i++) {
                        var vectorlayer = L.GeoJSON.geometryToLayer(geoJsons[i].geometry);
                        var coordinates = geoJsons[i].geometry.coordinates;
                        var geo;
                        switch (geoJsons[i].geometry.type) {
                            case 'LineString':
                                for (var j = 0; j < coordinates.length; j++) {
                                    var tempX = coordinates[j][0];
                                    coordinates[j][0] = coordinates[j][1];
                                    coordinates[j][1] = tempX;
                                }
                                geo = new L.Polyline(coordinates);
                                break;
                            case 'Polygon':
                                for (var j = 0; j < coordinates[0].length; j++) {
                                    var tempX = coordinates[0][j][0];
                                    coordinates[0][j][0] = coordinates[0][j][1];
                                    coordinates[0][j][1] = tempX;
                                }
                                var geo = new L.Polygon(coordinates[0]);
                                break;
                            case 'Point':
                                var tempX = coordinates[0];
                                coordinates[0] = coordinates[1];
                                coordinates[1] = tempX;
                                geo = new L.Polyline(coordinates);
                                break;
                        }
                        if (geoJsons[i].properties.name) {
                            geo.name = geoJsons[i].properties.name;
                        }
                        geo.setStyle({ color: '#f06eaa' });
                        geo.id = geoJsons[i].id;
                        editingData.removedIds.push(geoJsons[i].id);
                        geo.editing.enable();
                        drawnItems.addLayer(geo);
                    }
                    map.removeLayer(shapeLayer);
                });
            }
        });

        // Save the name of the shape.
        $('#btnSaveName').click(function () {
            if ($('#txtName').val() == '') {
                $('#spWarning').show();
                return;
            } else {
                $('#spWarning').hide();
            }

            // Take the input name of the shape.
            if (drawingLayer) {
                drawingLayer.name = $('#txtName').val();
                $('#txtName').val('');
            }
            hideDlg();
        });

        // Show/hide edit-shape-name dialog in model mode.
        function showDlg() {
            this.bgmask = L.DomUtil.create('div', 'bg-mask');
            $('body').append(this.bgmask);
            $('#dlgName').slideToggle("fast");
        }

        function hideDlg() {
            $('.bg-mask').remove();
            $('#dlgName').slideToggle("fast");
        }

        // Add a utility method to get root path.
        function getRootPath() {
            var pathArray = location.pathname.split('/');
            var appPath = "/";
            for (var i = 1; i < pathArray.length - 1; i++) {
                appPath += pathArray[i] + "/";
            }

            return appPath === "/" ? "" : appPath;
        };

        // Add a utility methods to get guid.
        function guid() {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
        };

    </script>
</body>
</html>
