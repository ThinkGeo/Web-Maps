@using ThinkGeo.MapSuite
@using ThinkGeo.MapSuite.Drawing
@using ThinkGeo.MapSuite.Layers
@using ThinkGeo.MapSuite.Shapes
@using ThinkGeo.MapSuite.Styles;
@using ThinkGeo.MapSuite.Mvc;
<script language="javascript" type="text/javascript">
    function spatialQuery(optionObj) {
        var placement = optionObj.value;

        Map1.ajaxCallAction('@ViewContext.RouteData.Values["Controller"].ToString()', 'SpatialQuery', { 'placement': placement }, mapCallback);
    }

    function mapCallback(result) {
        Map1.redrawLayer("StaticOverlay");
    }
</script>
<div class="four columns" id="navigation">
    @{Html.RenderPartial("SourceCode");}
    <div id="instrux-body">
        <div id="instrux-text">
            Select a spatial query type from the list to see the features that are found.
            <br />
            <select id="ddlSpatialQuery" onchange="spatialQuery(this);">
                <option value="Within" selected="selected">Within</option>
                <option value="Containing">Containing</option>
                <option value="Disjointed">Disjointed</option>
                <option value="Intersecting">Intersecting</option>
                <option value="Overlapping">Overlapping</option>
                <option value="TopologicalEqual">TopologicalEqual</option>
                <option value="Touching">Touching</option>
            </select>
        </div>
    </div>
</div>
<div class="sixteen columns" id="main">
    <div id="map">
        @{
            Html.ThinkGeo().Map("Map1", new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Percentage), 760)
                .MapBackground(new GeoSolidBrush(GeoColor.FromHtml("#E5E3DF")))
                .MapUnit(GeographyUnit.Meter)
                .ZoomLevelSet(new ThinkGeoCloudMapsZoomLevelSet())
                .CurrentExtent(-13914936.3491592, 11753184.6153385, 5565974.53966368, -5780349.22025635)
                .CustomOverlays(overlay =>
                {
                    // Please input your ThinkGeo Cloud API Key to enable the background map.
                    overlay.ThinkGeoCloudRasterMapsOverlay("ThinkGeoCloudMaps", "ThinkGeo Cloud API Key");

                    ShapeFileFeatureLayer worldLayer = new ShapeFileFeatureLayer(Server.MapPath("~/App_Data/cntry02_3857.shp"));
                    worldLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle = AreaStyles.CreateSimpleAreaStyle(GeoColor.SimpleColors.Transparent, GeoColor.FromArgb(100, GeoColor.SimpleColors.Green));
                    worldLayer.ZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20;

                    InMemoryFeatureLayer rectangleLayer = new InMemoryFeatureLayer();
                    rectangleLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle = new AreaStyle(new GeoSolidBrush(new GeoColor(50, 100, 100, 200)));
                    rectangleLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle.OutlinePen.Color = GeoColor.StandardColors.DarkBlue;
                    rectangleLayer.ZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20;
                    BaseShape baseShape = BaseShape.CreateShapeFromWellKnownData("POLYGON((-5565974.53966368 -2273030.92698769,-5565974.53966368 2273030.92698769,5565974.53966368 2273030.92698769,5565974.53966368 -2273030.92698769,-5565974.53966368 -2273030.92698769))");
                    baseShape.Id = "Rectangle";
                    rectangleLayer.InternalFeatures.Add("Rectangle", new Feature(baseShape));

                    InMemoryFeatureLayer spatialQueryResultLayer = new InMemoryFeatureLayer();
                    spatialQueryResultLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle = new AreaStyle(new GeoSolidBrush(GeoColor.FromArgb(200, GeoColor.SimpleColors.PastelRed)));
                    spatialQueryResultLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle.OutlinePen.Color = GeoColor.StandardColors.Red;
                    spatialQueryResultLayer.ZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20;

                    overlay.LayerOverlay("StaticOverlay").IsBaseOverlay(false)
                        .Layer("WorldLayer", worldLayer)
                        .Layer("RectangleLayer", rectangleLayer)
                        .Layer("SpatialQueryResultLayer", spatialQueryResultLayer);
                })

                .Render();
        }
    </div>
</div>
